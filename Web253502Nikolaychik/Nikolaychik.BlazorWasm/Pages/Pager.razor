@inject IDataService DataService

@if (DataService.TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <!-- Кнопка "Предыдущая" -->
            <li class="page-item @(DataService.CurrentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(DataService.CurrentPage - 1)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </button>
            </li>

            @for (int i = 1; i <= DataService.TotalPages; i++)
            {
                var currentPage = i;
                <li class="page-item @(currentPage == DataService.CurrentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(currentPage)">
                        @currentPage
                    </button>
                </li>
            }

            <!-- Кнопка "Следующая" -->
            <li class="page-item @(DataService.CurrentPage == DataService.TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(DataService.CurrentPage + 1)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </button>
            </li>
        </ul>
    </nav>
}

@code {
    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= DataService.TotalPages)
        {
            DataService.CurrentPage = pageNumber;
            await DataService.GetProductListAsync(pageNumber);
            StateHasChanged();
        }
    }
    protected override void OnInitialized()
    {
        DataService.DataLoaded += StateHasChanged;
    }

    public void Dispose()
    {
        DataService.DataLoaded -= StateHasChanged;
    }
}